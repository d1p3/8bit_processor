// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/03/2018 14:40:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU_final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_final_vlg_sample_tst(
	A0,
	A1,
	A2,
	A3,
	B0,
	B1,
	B2,
	B3,
	s0,
	s1,
	sampler_tx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  B0;
input  B1;
input  B2;
input  B3;
input  s0;
input  s1;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or A1 or A2 or A3 or B0 or B1 or B2 or B3 or s0 or s1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU_final_vlg_check_tst (
	carry,
	Overload,
	r0,
	r1,
	r2,
	r3,
	sampler_rx
);
input  carry;
input  Overload;
input  r0;
input  r1;
input  r2;
input  r3;
input sampler_rx;

reg  carry_expected;
reg  Overload_expected;
reg  r0_expected;
reg  r1_expected;
reg  r2_expected;
reg  r3_expected;

reg  carry_prev;
reg  Overload_prev;
reg  r0_prev;
reg  r1_prev;
reg  r2_prev;
reg  r3_prev;

reg  carry_expected_prev;
reg  Overload_expected_prev;
reg  r0_expected_prev;
reg  r1_expected_prev;
reg  r2_expected_prev;
reg  r3_expected_prev;

reg  last_carry_exp;
reg  last_Overload_exp;
reg  last_r0_exp;
reg  last_r1_exp;
reg  last_r2_exp;
reg  last_r3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	carry_prev = carry;
	Overload_prev = Overload;
	r0_prev = r0;
	r1_prev = r1;
	r2_prev = r2;
	r3_prev = r3;
end

// update expected /o prevs

always @(trigger)
begin
	carry_expected_prev = carry_expected;
	Overload_expected_prev = Overload_expected;
	r0_expected_prev = r0_expected;
	r1_expected_prev = r1_expected;
	r2_expected_prev = r2_expected;
	r3_expected_prev = r3_expected;
end



// expected carry
initial
begin
	carry_expected = 1'bX;
end 

// expected Overload
initial
begin
	Overload_expected = 1'bX;
end 

// expected r0
initial
begin
	r0_expected = 1'bX;
end 

// expected r1
initial
begin
	r1_expected = 1'bX;
end 

// expected r2
initial
begin
	r2_expected = 1'bX;
end 

// expected r3
initial
begin
	r3_expected = 1'bX;
end 
// generate trigger
always @(carry_expected or carry or Overload_expected or Overload or r0_expected or r0 or r1_expected or r1 or r2_expected or r2 or r3_expected or r3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected carry = %b | expected Overload = %b | expected r0 = %b | expected r1 = %b | expected r2 = %b | expected r3 = %b | ",carry_expected_prev,Overload_expected_prev,r0_expected_prev,r1_expected_prev,r2_expected_prev,r3_expected_prev);
	$display("| real carry = %b | real Overload = %b | real r0 = %b | real r1 = %b | real r2 = %b | real r3 = %b | ",carry_prev,Overload_prev,r0_prev,r1_prev,r2_prev,r3_prev);
`endif
	if (
		( carry_expected_prev !== 1'bx ) && ( carry_prev !== carry_expected_prev )
		&& ((carry_expected_prev !== last_carry_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carry_exp = carry_expected_prev;
	end
	if (
		( Overload_expected_prev !== 1'bx ) && ( Overload_prev !== Overload_expected_prev )
		&& ((Overload_expected_prev !== last_Overload_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Overload :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Overload_expected_prev);
		$display ("     Real value = %b", Overload_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Overload_exp = Overload_expected_prev;
	end
	if (
		( r0_expected_prev !== 1'bx ) && ( r0_prev !== r0_expected_prev )
		&& ((r0_expected_prev !== last_r0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r0_expected_prev);
		$display ("     Real value = %b", r0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r0_exp = r0_expected_prev;
	end
	if (
		( r1_expected_prev !== 1'bx ) && ( r1_prev !== r1_expected_prev )
		&& ((r1_expected_prev !== last_r1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_r1_exp = r1_expected_prev;
	end
	if (
		( r2_expected_prev !== 1'bx ) && ( r2_prev !== r2_expected_prev )
		&& ((r2_expected_prev !== last_r2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r2_exp = r2_expected_prev;
	end
	if (
		( r3_expected_prev !== 1'bx ) && ( r3_prev !== r3_expected_prev )
		&& ((r3_expected_prev !== last_r3_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r3_exp = r3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU_final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg B0;
reg B1;
reg B2;
reg B3;
reg s0;
reg s1;
// wires                                               
wire carry;
wire Overload;
wire r0;
wire r1;
wire r2;
wire r3;

wire sampler;                             

// assign statements (if any)                          
ALU_final i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.carry(carry),
	.Overload(Overload),
	.r0(r0),
	.r1(r1),
	.r2(r2),
	.r3(r3),
	.s0(s0),
	.s1(s1)
);

// A0
initial
begin
	A0 = 1'b1;
	A0 = #50000 1'b0;
	A0 = #100000 1'b1;
	A0 = #50000 1'b0;
end 

// A1
initial
begin
	A1 = 1'b0;
	A1 = #150000 1'b1;
	A1 = #50000 1'b0;
end 

// A2
initial
begin
	A2 = 1'b0;
	A2 = #150000 1'b1;
	A2 = #50000 1'b0;
end 

// A3
initial
begin
	A3 = 1'b0;
	A3 = #100000 1'b1;
	A3 = #50000 1'b0;
end 

// B0
initial
begin
	B0 = 1'b1;
	B0 = #50000 1'b0;
end 

// B1
initial
begin
	B1 = 1'b0;
end 

// B2
initial
begin
	B2 = 1'b0;
end 

// B3
initial
begin
	B3 = 1'b0;
	B3 = #100000 1'b1;
	B3 = #50000 1'b0;
end 

// s0
initial
begin
	s0 = 1'b0;
end 

// s1
initial
begin
	s1 = 1'b0;
end 

ALU_final_vlg_sample_tst tb_sample (
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.s0(s0),
	.s1(s1),
	.sampler_tx(sampler)
);

ALU_final_vlg_check_tst tb_out(
	.carry(carry),
	.Overload(Overload),
	.r0(r0),
	.r1(r1),
	.r2(r2),
	.r3(r3),
	.sampler_rx(sampler)
);
endmodule

